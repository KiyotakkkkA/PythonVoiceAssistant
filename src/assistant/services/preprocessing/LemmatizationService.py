from pymorphy3 import MorphAnalyzer
from interfaces import ISingleton


class LemmatizationService(ISingleton):
    SERVICE_NAME = "LemmatizationService"
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Å–ª–æ–≤ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ)
        """
        self.morph = MorphAnalyzer(lang="ru")
        self._cache = {}

    def execute(self, text: str) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        
        Returns:
            str: –õ–µ–º–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text or not text.strip():
            return text

        words = text.split()
        result = []

        for word in words:
            punct_before = ''
            punct_after = ''
            clean_word = word
            while clean_word and not clean_word[0].isalpha():
                punct_before += clean_word[0]
                clean_word = clean_word[1:]
            while clean_word and not clean_word[-1].isalpha():
                punct_after = clean_word[-1] + punct_after
                clean_word = clean_word[:-1]

            if not clean_word:
                result.append(word)
                continue

            if clean_word not in self._cache:
                try:
                    self._cache[clean_word] = self.morph.parse(clean_word)[0].normal_form
                except Exception:
                    self._cache[clean_word] = clean_word

            lemmatized = self._cache[clean_word]
            result.append(punct_before + lemmatized + punct_after)

        return ' '.join(result)

    @classmethod
    def test(cls, console_output: bool = False) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        
        Args:
            console_output (bool): –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        
        Returns:
            bool: True, –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        service = cls()

        test_cases = [
            {"input": "–≤–∫–ª—é—á–∞—é", "output": "–≤–∫–ª—é—á–∞—Ç—å"},
            {"input": "–≤–∫–ª—é—á–∏", "output": "–≤–∫–ª—é—á–∏—Ç—å"},
            {"input": "–≤–∫–ª—é—á–∏–ª", "output": "–≤–∫–ª—é—á–∏—Ç—å"},
            {"input": "–≤–∫–ª—é—á—É", "output": "–≤–∫–ª—é—á–∏—Ç—å"},
            {"input": "–≤–∫–ª—é—á–∞–µ–º", "output": "–≤–∫–ª—é—á–∞—Ç—å"},
            {"input": "—Å–≤–µ—Ç", "output": "—Å–≤–µ—Ç"},
            {"input": "—Å–≤–µ—Ç–∞", "output": "—Å–≤–µ—Ç"},
            {"input": "—Å–≤–µ—Ç—É", "output": "—Å–≤–µ—Ç"},
            {"input": "—Å–≤–µ—Ç–æ–º", "output": "—Å–≤–µ—Ç"},
            {"input": "–æ —Å–≤–µ—Ç–µ", "output": "–æ —Å–≤–µ—Ç"},

            # –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
            {"input": "—Ö–æ—Ä–æ—à–∏–π", "output": "—Ö–æ—Ä–æ—à–∏–π"},
            {"input": "—Ö–æ—Ä–æ—à–µ–≥–æ", "output": "—Ö–æ—Ä–æ—à–∏–π"},
            {"input": "—Ö–æ—Ä–æ—à–µ–º—É", "output": "—Ö–æ—Ä–æ—à–∏–π"},
            {"input": "—Ö–æ—Ä–æ—à–µ–π", "output": "—Ö–æ—Ä–æ—à–∏–π"},

            # –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
            {"input": "–µ–≥–æ", "output": "–æ–Ω"},
            {"input": "–µ–º—É", "output": "–æ–Ω"},
            {"input": "—Å –Ω–∏–º", "output": "—Å –æ–Ω–∏"},

            # –ß–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ
            {"input": "–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ", "output": "–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤—ã–π"},
            {"input": "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ", "output": "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π"},
            {"input": "—Ç—Ä–µ—Ç–∏–π", "output": "—Ç—Ä–µ—Ç–∏–π"},
            {"input": "—Ç—Ä–µ—Ç—å–µ–≥–æ", "output": "—Ç—Ä–µ—Ç–∏–π"},

            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            {"input": "–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç –≤ –≥–æ—Å—Ç–∏–Ω–æ–π", "output": "–≤–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –≤ –≥–æ—Å—Ç–∏–Ω–∞—è"},
            {"input": "–≤—ã–∫–ª—é—á–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä", "output": "–≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"},
            {"input": "–æ—Ç–∫—Ä–æ–π –¥–≤–µ—Ä—å", "output": "–æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å"},
            {"input": "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å", "output": "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å"},
            {"input": "–ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ", "output": "–ø–æ–≥–æ–¥–∞ –≤ –º–æ—Å–∫–≤–∞"},
            {"input": "–Ω–∞–π–¥–∏ –≤–∏–¥–µ–æ –ø—Ä–æ –∫–æ—Ç–æ–≤", "output": "–Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø—Ä–æ –∫–æ—Ç"},
            {"input": "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤", "output": "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç"},
            {"input": "—è –±–µ–≥–∞–ª –±—ã—Å—Ç—Ä–æ", "output": "—è –±–µ–≥–∞—Ç—å –±—ã—Å—Ç—Ä–æ"},
            {"input": "–º—ã –µ–ª–∏ –ø–∏—Ü—Ü—É", "output": "–º—ã –µ—Å—Ç—å –ø–∏—Ü—Ü–∞"},
            {"input": "–æ–Ω–∞ –±—ã–ª–∞ —Å—á–∞—Å—Ç–ª–∏–≤–∞", "output": "–æ–Ω–∞ –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–π"},
            {"input": "—ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "output": "—ç—Ç–æ —Ä–∞–±–æ—Ç–∞—Ç—å"},
            {"input": "–∫–æ–º–ø—å—é—Ç–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç", "output": "–∫–æ–º–ø—å—é—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞—Ç—å"},
            {"input": "–≤–∫–ª—é—á–∏ –µ–≥–æ", "output": "–≤–∫–ª—é—á–∏—Ç—å –æ–Ω"},
            {"input": "–ø—Ä–æ–≤–µ—Ä—å —ç—Ç–æ", "output": "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ"},
            {"input": "—Å–∫–∞–∂–∏ –º–Ω–µ", "output": "—Å–∫–∞–∑–∞—Ç—å —è"},
            {"input": "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "output": "–ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞"},
            {"input": "—É–≤–µ–ª–∏—á—å –≥—Ä–æ–º–∫–æ—Å—Ç—å", "output": "—É–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"},
            {"input": "–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É", "output": "–≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫–∞"},
            {"input": "–æ—Ç–∫—Ä–æ–π –æ–∫–Ω–æ", "output": "–æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ"},
            {"input": "–∑–∞–∫—Ä–æ–π –¥–≤–µ—Ä—å", "output": "–∑–∞–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å"},
            {"input": "–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç", "output": "–≤–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç"},
            {"input": "–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç", "output": "–≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç"},
            {"input": "–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "output": "–≤–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"},
            {"input": "—á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", "output": "—á—Ç–æ —Ç–∞–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"},
            {"input": "—è —É—á—É python", "output": "—è —É—á–∏—Ç—å python"},
            {"input": "—ç—Ç–æ –º–æ–π –∫–æ–¥", "output": "—ç—Ç–æ –º–æ–π –∫–æ–¥"},
            {"input": "–≤ –∫–æ–º–Ω–∞—Ç–µ", "output": "–≤ –∫–æ–º–Ω–∞—Ç–∞"},
            {"input": "–≤ –≥–æ—Å—Ç–∏–Ω–æ–π", "output": "–≤ –≥–æ—Å—Ç–∏–Ω–∞—è"},
            {"input": "–Ω–∞ –∫—É—Ö–Ω–µ", "output": "–Ω–∞ –∫—É—Ö–Ω—è"},
            {"input": "–≤ —Å–ø–∞–ª—å–Ω–µ", "output": "–≤ —Å–ø–∞–ª—å–Ω—è"},
            {"input": "–≤ –≤–∞–Ω–Ω–æ–π", "output": "–≤ –≤–∞–Ω–Ω–∞—è"},
            {"input": "–≤ –∫–æ—Ä–∏–¥–æ—Ä–µ", "output": "–≤ –∫–æ—Ä–∏–¥–æ—Ä"},
            {"input": "–≤ –æ—Ñ–∏—Å–µ", "output": "–≤ –æ—Ñ–∏—Å"},
            {"input": "–≤ —à–∫–∞—Ñ—É", "output": "–≤ —à–∫–∞—Ñ"},
            {"input": "–≤ —è—â–∏–∫–µ", "output": "–≤ —è—â–∏–∫"},
        ]

        if console_output:
            print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LemmatizationService:")
            print("=" * 60)

        for idx, case in enumerate(test_cases):
            result = service.execute(case["input"])
            assert result == case["output"], f"–¢–µ—Å—Ç {idx} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: '{result}' != '{case['output']}'"
            if console_output:
                print(f"‚úÖ –¢–µ—Å—Ç {idx + 1} –ø—Ä–æ–π–¥–µ–Ω: '{case['input']}' ‚Üí '{result}'")

        if console_output:
            print(f"\nüéâ –í—Å–µ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True


if __name__ == "__main__":
    LemmatizationService.test(console_output=True)